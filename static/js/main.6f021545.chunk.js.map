{"version":3,"sources":["Clock.tsx","ClockBar.tsx","SignIn.tsx","Hud.tsx","serviceWorker.ts","index.tsx"],"names":["Clock","c","progress","n_slices","theta","this","props","clock","slices","i","push","x","w","y","h","radius","angle","fill","stroke","strokeWidth","rotation","onClick","incr_func","onContextMenu","e","evt","preventDefault","key","toString","className","width","height","desc","React","PureComponent","ClockBar","clocks","Array","from","map","pair","id","click_func","owner","delete_func","Number","window","prompt","new_func","SignIn","state","email","pw","handleEmailChange","bind","handlePwChange","handleSubmit","event","setState","target","value","firebase","signInWithEmailAndPassword","catch","error","console","log","message","onSubmit","type","onChange","players","Hud","db","unsub_auth","onAuthStateChanged","user","loadData","group_clocks","Map","player_clocks","current_player","unsub_fns","handle_clock_click","new_clock","delete_clock","change_player","fn","unsub_funcs","collection","orderBy","onSnapshot","snap","docs","doc","data","doc_ids","gc","forEach","set","length","concat","add","timestamp","Timestamp","now","incr","alert","button","clock_doc","get","then","a","old_clock","incr_clock","delete","currentTarget","slice","player","Boolean","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f021545.chunk.js","sourcesContent":["import React from \"react\";\nimport Konva from \"konva\";\nimport { Stage, Layer, Wedge } from \"react-konva\";\nimport { Clock_t } from \"./Types\";\n\ninterface Props {\n    clock: Clock_t;\n    incr_func: (e: Konva.KonvaEventObject<MouseEvent>) => void;\n}\n\nclass Clock extends React.PureComponent<Props, {}> {\n    public is_full(c: Clock_t): boolean {\n        return c.progress === c.n_slices;\n    }\n\n    public is_empty(c: Clock_t): boolean {\n        return c.progress === 0;\n    }\n\n    public render() {\n        const w = 130;\n        const h = 130;\n\n        const theta = 360 / this.props.clock.n_slices;\n        let slices = [];\n\n        for (let i = 0; i < this.props.clock.n_slices; i++) {\n            slices.push(\n                <Wedge\n                    x={w / 2}\n                    y={h / 2}\n                    radius={60}\n                    angle={theta}\n                    fill={i < this.props.clock.progress ? \"gray\" : \"white\"}\n                    stroke={\"black\"}\n                    strokeWidth={2}\n                    rotation={i * theta - 90}\n                    onClick={this.props.incr_func}\n                    onContextMenu={e => {\n                        // Suppress right click menu on clocks\n                        e.evt.preventDefault();\n                    }}\n                    key={i.toString()}\n                />\n            );\n        }\n\n        return (\n            <div className=\"flex flex-column mw5\">\n                <div className=\"pa3 mw5 self-center\">\n                    <Stage width={w} height={h}>\n                        <Layer>{slices}</Layer>\n                    </Stage>\n                </div>\n                <p className=\"tc pa1 ws-normal\">{this.props.clock.desc}</p>\n            </div>\n        );\n    }\n}\n\nexport default Clock;\n","import React from \"react\";\nimport { Clock_t } from \"./Types\";\nimport Clock from \"./Clock\";\n\ninterface Props {\n    clocks: Map<string, Clock_t>;\n    owner: string;\n    click_func: Function;\n    new_func: Function;\n    delete_func: Function;\n}\n\nfunction ClockBar(props: Props) {\n    const clocks = Array.from(props.clocks).map(pair => {\n        const id = pair[0];\n        const clock = pair[1];\n\n        return (\n            <div key={id} className=\"flex flex-column justify-between outline\">\n                <div className=\"\">\n                    <Clock\n                        clock={clock}\n                        incr_func={e => props.click_func(e, props.owner, id)}\n                    />\n                </div>\n                <div className=\"tc pb2\">\n                    <button className=\"ba pointer ph1\"\n                       onClick={() => {\n                           props.delete_func(id, props.owner);\n                       }}\n                    >Delete</button>\n                </div>\n            </div>\n        );\n    });\n\n    return (\n        <div>\n            <div className=\"p0\">\n                <p className=\"ttc f3\">{props.owner}</p>\n            </div>\n            <div className=\"flex outline\">\n                <div className=\"flex flex-column tc bg-blue pointer justify-center\"\n                     onClick={ () => {\n                         const n_slices = Number(window.prompt(\"how many slices?\", \"4\"));\n                         const desc = window.prompt(\"what's the clock for?\");\n                         props.new_func(props.owner, desc, n_slices);\n                     }}\n                >\n                    <div className=\"f2 w3\">+</div>\n                </div>\n\n                <div className=\"flex overflow-x-scroll items-top w-100\">\n                    {clocks}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ClockBar;\n","import * as React from \"react\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\ninterface State {\n    email: string,\n    pw: string,\n}\n\nclass SignIn extends React.PureComponent<{}, State> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            email: \"\",\n            pw: \"\",\n        };\n\n        this.handleEmailChange = this.handleEmailChange.bind(this);\n        this.handlePwChange = this.handlePwChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleEmailChange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            email: event.target.value\n        });\n    }\n\n    handlePwChange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({\n            pw: event.target.value\n        });\n    }\n\n    handleSubmit(event: React.ChangeEvent<HTMLFormElement>) {\n        firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.pw).catch(function(error) {\n            console.log(error.message);\n        })\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              E-mail:\n              <input type=\"text\" value={this.state.email} onChange={this.handleEmailChange} />\n              Password:\n              <input type=\"password\" value={this.state.pw} onChange={this.handlePwChange}  />\n            </label>\n            <input type=\"submit\" value=\"Sign In\" />\n          </form>\n        );\n    }\n}\n\nexport default SignIn;","import React from \"react\";\nimport ClockBar from \"./ClockBar\";\nimport SignIn from \"./SignIn\";\nimport Konva from \"konva\";\nimport { Clock_t } from \"./Types\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst players = [\"group\", \"bricks\", \"shivers\", \"dogs\", \"tick tock\"];\n\ninterface State {\n    user: firebase.User | null;\n    group_clocks: Map<string, Clock_t>;\n    player_clocks: { [name: string]: Map<string, Clock_t> };\n    current_player: string;\n    unsub_fns: Function[];\n}\n\nclass Hud extends React.PureComponent<{}, State> {\n    private db = firebase.firestore();\n\n\n    constructor(props: {}) {\n        super(props);\n\n        const unsub_auth = firebase.auth().onAuthStateChanged(user => {\n            this.setState({ user: user });\n            this.loadData();\n        });\n\n        this.state = {\n            user: null,\n            group_clocks: new Map(),\n            player_clocks: {\n                \"bricks\": new Map(),\n                \"shivers\": new Map(),\n                \"dogs\": new Map(),\n                \"tick tock\": new Map(),\n            },\n            current_player: \"bricks\",\n            unsub_fns: [unsub_auth],\n        };\n\n        this.handle_clock_click = this.handle_clock_click.bind(this);\n        this.new_clock = this.new_clock.bind(this);\n        this.delete_clock = this.delete_clock.bind(this);\n        this.change_player = this.change_player.bind(this);\n    }\n\n    public componentWillUnmount() {\n        for (const fn of this.state.unsub_fns) {\n            fn();\n        }\n    }\n\n    private loadData() {\n        if (this.state.user === null) {\n            return\n        } else {\n            let unsub_funcs: Function[] = [];\n\n            for (let i = 0; i < players.length; i++) {\n                unsub_funcs[i] = this.db.collection(players[i] + \"_clocks\")\n                    .orderBy(\"timestamp\", \"desc\")\n                    .onSnapshot(snap => {\n                        const clocks = snap.docs.map(doc => doc.data() as Clock_t);\n                        const doc_ids = snap.docs.map(doc => doc.id);\n\n                        let gc = new Map<string, Clock_t>();\n                        doc_ids.forEach((id, i) => { gc.set(id, clocks[i])});\n\n                        if (players[i] === \"group\") {\n                            this.setState({\n                                group_clocks: gc,\n                            });\n                        } else {\n                            this.setState((state, props) => {\n                                return {\n                                    ...state,\n                                    player_clocks: {\n                                        ...state.player_clocks,\n                                        [players[i]]: gc,\n                                    }\n                                }\n                            })\n                        }\n                    });\n            }\n\n            this.setState((state, props) => {\n                return {\n                    ...state,\n                    unsub_fns: state.unsub_fns.concat(unsub_funcs),\n                }\n            });\n        }\n    }\n\n    private new_clock(owner: string, desc: string, n_slices: number) {\n        this.db.collection(owner + \"_clocks\").add({\n            desc: desc,\n            n_slices: n_slices,\n            progress: 0,\n            timestamp: firebase.firestore.Timestamp.now(),\n        })\n    }\n\n    private incr_clock(c: Clock_t, incr: 1 | -1): Clock_t {\n        // Ignore increment/decrement past max value\n        if ((incr === 1 && c.n_slices === c.progress) ||\n            (incr === -1 && c.progress === 0))\n        {\n            return c;\n        }\n\n        return {\n            ...c,\n            progress: c.progress + incr,\n            n_slices: c.n_slices,\n        };\n    }\n\n    private handle_clock_click(evt: Konva.KonvaEventObject<MouseEvent>, owner: string, id: string) {\n        if (this.state.user === null) {\n            alert(\"Error: You're not logged in! AaaAAh!\");\n        }\n\n        let e = evt.evt; // the underlying js event\n        e.preventDefault();\n\n        // Ignore clicks with buttons other than left or right mb\n        if (e.button !== 0 && e.button !== 2) {\n            return;\n        }\n\n        const incr = e.button === 0 ? 1 : -1;\n\n        // set the new clock\n        const clock_doc = this.db.collection(owner + \"_clocks\").doc(id);\n\n        clock_doc.get().then(a => {\n            const old_clock = a.data() as Clock_t;\n            clock_doc.set(this.incr_clock(old_clock, incr))\n        });\n    }\n\n    private delete_clock(id: string, owner: string) {\n        this.db.collection(owner + \"_clocks\").doc(id).delete();\n    }\n\n    private change_player(e: React.FormEvent<HTMLSelectElement>) {\n        this.setState({\n            current_player: e.currentTarget.value,\n        });\n    }\n\n    public render() {\n        // if not signed in\n        if (!this.state.user) {\n            return (\n            <div className=\"outline\">\n                <SignIn />\n            </div>\n            );\n        } else { // if signed in\n            // const bring_to_front = (arr: string[], item: string) => {\n            //     for (let i = 0; i < arr.length; i++) {\n            //         if (arr[i] === item) {\n            //             return arr.splice(1, 0, arr.splice(i, 1)[0]);\n            //         }\n            //     }\n            //     return arr;\n            // };\n\n            // const ordered_players = bring_to_front(players.slice(0), this.state.current_player);\n            return (\n                <div className=\"flex\">\n                    <div className=\"flex flex-column w-80\">\n                        {players.map(owner => {\n                            return <div key={owner} className=\"\">\n                                <ClockBar owner={owner}\n                                          clocks={owner === \"group\"\n                                                      ? this.state.group_clocks\n                                                      : this.state.player_clocks[owner]\n                                                 }\n                                          click_func={this.handle_clock_click}\n                                          new_func={this.new_clock}\n                                          delete_func={this.delete_clock}\n                                          />\n                            </div>\n                        })}\n                    </div>\n                    <div className=\"flex-column w-20 outline\">\n                        <p className=\"f4\">Which one are you?</p>\n                        <select value={this.state.current_player} onChange={this.change_player}>\n                            { players.slice(1).map( player => { // slice off the \"group\" player\n                                return <option value={player}>{player}</option>\n                            }) }\n                        </select>\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default Hud;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Hud from \"./Hud\";\nimport * as firebase from \"firebase/app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyAwY_9bJhDtZRn52OWKkU9J3gNklyB2MaU\",\n    authDomain: \"bitd-hud.firebaseapp.com\",\n    databaseURL: \"https://bitd-hud.firebaseio.com\",\n    projectId: \"bitd-hud\",\n    storageBucket: \"bitd-hud.appspot.com\",\n    messagingSenderId: \"87588692405\",\n    appId: \"1:87588692405:web:eb12f6f11340afbc\"\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(<Hud />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}